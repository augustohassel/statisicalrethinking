predicted_mean <- predicted %>% as.tibble() %>% map(mean) %>% bind_rows() %>% t() %>% as.tibble() %>% rename(predicted_height=V1)
d$predicted_height <- predicted_mean$predicted_height
ggplot(data = d, aes(x = height, y = predicted_height)) +
geom_jitter() +
geom_abline(slope = 1)
# 5.3.2 Multicollinear milk ####
data("milk")
milk %>% str
d <- milk
corrplot::corrplot(d)
complete.cases(d)
corrplot::corrplot(d %>% slect(kcal.per.g, perc.fat, perc.lactose))
corrplot::corrplot(d %>% select(kcal.per.g, perc.fat, perc.lactose))
d %>% select(kcal.per.g, perc.fat, perc.lactose)
d %>% select(kcal.per.g, perc.fat, perc.lactose) %>% complete.cases()
corrplot::corrplot(d %>% select(kcal.per.g, perc.fat, perc.lactose))
cor(d %>% select(kcal.per.g, perc.fat, perc.lactose))
corrplot::corrplot(cor(d %>% select(kcal.per.g, perc.fat, perc.lactose)))
corrplot::corrplot(cor(d %>% select(kcal.per.g, perc.fat, perc.lactose)), order = "hclust")
corrplot::corrplot(cor(d %>% select(kcal.per.g, perc.fat, perc.lactose)))
corrplot::corrplot(cor(d %>% select(kcal.per.g, perc.fat, perc.lactose)), order = "hclust")
corrplot::corrplot(cor(d %>% select(kcal.per.g, perc.fat, perc.lactose)))
apropos(what = "FindCorr")
pairs(~kcal.per.g + perc.fat + perc.lactose, data = d)
corrplot::corrplot(cor(d %>% select(kcal.per.g, perc.fat, perc.lactose)))cor(d %>% select(kcal.per.g, perc.fat, perc.lactose))
cor(d %>% select(kcal.per.g, perc.fat, perc.lactose))
mean(d$perc.fat)
dnorm(mean = 180, sd = 10)
dnorm(x = 1, mean = 180, sd = 10)
dnorm(x = 2, mean = 180, sd = 10)
dnorm(x = 1;10, mean = 180, sd = 10)
dnorm(x = 1:10, mean = 180, sd = 10)
rnorm(x = 1:10, mean = 180, sd = 10)
rnorm(mean = 180, sd = 10)
rnorm(1, mean = 180, sd = 10)
rnorm(1:10, mean = 180, sd = 10)
mean(d$kcal.per.g)
sd(d$kcal.per.g)
# kcal.per.g regressed on perc.fat
m5.10 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bf * perc.fat,
a ~ dnorm(0.6, 10),
bf ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
)
)
# kcal.per.g regressed on perc.fat
m5.10 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bf * perc.fat,
a ~ dnorm(0.6, 10),
bf ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data d
)
# kcal.per.g regressed on perc.fat
m5.10 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bf * perc.fat,
a ~ dnorm(0.6, 10),
bf ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data = d
)
m5.11 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bf * perc.lactose,
a ~ dnorm(0.6, 10),
bf ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data = d
)
precis(m5.10, digits = 3)
precis(m5.11, digits = 3)
m5.11 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bl * perc.lactose,
a ~ dnorm(0.6, 10),
bl ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data = d
)
precis(m5.10, digits = 3)
precis(m5.11, digits = 3)
# kcal.per.g regressed on perc.fat and per.lactose
m5.12 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bf * perc.fat + bl *  perc.lactose,
a ~ dnorm(0.6, 10),
bf ~ dnorm(0, 1),
bl ~ dnorm(0, 1),
sigma ~ dunif(0, 10)
),
data = d
)
precis(m5.12)
precis(m5.12, digits = 3)
precis(m5.10, digits = 3)
cor(d$perc.fat, d$perc.lactose)
0.9^2
# Multivariate Linear Models ####
source(file = "scripts/basePackages.R")
# Post-treatment bias ####
n <- 100
h0 <- rnorm(n, 10, 2)
treatment <- rep(0:1, each=n/2)
treatment
fungus <- rbinom(n, size = 1, prob = 0.5 - treatment*0.4)
fungus
fungus <- rbinom(n, size = 2, prob = 0.5 - treatment*0.4)
fungus
fungus <- rbinom(n, size = 1, prob = 0.5 - treatment*0.4)
h1 <- h0 + rnorm(n, mean = 5-3*fungus)
h1
d <- tibble(
h0 = h0,
h1 = h1,
treatment = treatment,
fungus = fungus
)
d
m5.13 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bh * h0 + bt * treatment + bf * fungus,
a ~ dnorm(0, 100),
c(bh, bt, bf) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
d <- data.frame(
h0 = h0,
h1 = h1,
treatment = treatment,
fungus = fungus
)
m5.13 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bh * h0 + bt * treatment + bf * fungus,
a ~ dnorm(0, 100),
c(bh, bt, bf) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
precis(m5.13)
plot(precis(m5.13))
# Post-treatment bias ####
n <- 100
h0 <- rnorm(n, 10, 2)
treatment <- rep(0:1, each=n/2)
fungus <- rbinom(n, size = 1, prob = 0.5 - treatment*0.4)
h1 <- h0 + rnorm(n, mean = 5-3*fungus)
d <- data.frame(
h0 = h0,
h1 = h1,
treatment = treatment,
fungus = fungus
)
m5.13 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bh * h0 + bt * treatment + bf * fungus,
a ~ dnorm(0, 100),
c(bh, bt, bf) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
plot(precis(m5.13))
m5.14 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bh * h0 + bt * treatment,
a ~ dnorm(0, 100),
c(bh, bt) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
plot(precis(m5.14))
m5.14 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bt * treatment,
a ~ dnorm(0, 100),
c(bt) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
plot(precis(m5.14))
m5.14 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bt * treatment,
a ~ dnorm(0, 100),
c(bt) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
plot(precis(m5.14))
m5.14 <- rethinking::map(
alist(
h1 ~ dnorm(mu, sigma),
mu <- a + bh * h0 + bt * treatment,
a ~ dnorm(0, 100),
c(bh, bt) ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
),
data = d
)
plot(precis(m5.14))
precis(m5.14)
d$h1 %>% mean
ggplot(data = d, aes(h0, h1))+
geom_jitter()
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter()
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
stat_smooth()
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
stat_smooth(formula = "h1 ~ h0 + treatment")
lm(h1 ~ h0 + treatment, data = d)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(formula = h1 ~ h0 + treatment)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(formula = lm(h1 ~ h0 + treatment))
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(formula = "lm(h1 ~ h0 + treatment)")
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0 + treatment)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0 + treatment, data = d)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0 + treatment)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0 + treatment, data = d)
ggplot(data = d, aes(h0, h1))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0 + treatment, data = d)
ggplot(data = d, aes(h0, h1))+
geom_jitter() +
geom_smooth(method = "lm", formula = h1 ~ h0 + treatment)
ggplot(data = d, aes(h0, h1))+
geom_jitter() +
geom_smooth(method = lm, formula = h1 ~ h0 + treatment)
mod1 <- lm(h1 ~ h0 + treatment, data=d)
mod1
d %>%
data_grid(ho)
library(modelr)
d %>%
data_grid(h1)
d %>%
data_grid(h0, treatment)
d %>%
data_grid(h0, treatment) %>%
gather_predictions(mod1)
d %>%
data_grid(.model = mod1) %>%
gather_predictions(mod1)
d %>%
data_grid(h0, treatment) %>%
gather_predictions(mod1)
d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(y=pred))
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred))
ggplot(data = d, aes(h0, h1))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred))
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred))
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_point() +
geom_line(data = grid, aes(x= h0, y=pred))
grid
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, color=treatment))
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid %>% filter(treatment==0), aes(x= h0, y=pred))
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
mod1 <- lm(h1 ~ h0 + I(treatment^2), data=d)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
mod1 <- lm(h1 ~ h0 + I(treatment^5), data=d)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
mod1
mod1 <- lm(h1 ~ h0 + ns(treatment, 5), data=d)
library(splines)
mod1 <- lm(h1 ~ h0 + ns(treatment, 5), data=d)
mod1 <- lm(h1 ~ ns(h0, 4) + treatment, data=d)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
mod1 <- lm(h1 ~ ns(h0, 20) + treatment, data=d)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
mod1 <- lm(h1 ~ ns(h0, 1) + treatment, data=d)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
mod1 <- lm(h1 ~ h0 + treatment, data=d)
grid <- d %>%
data_grid(h0, treatment) %>%
add_predictions(mod1)
ggplot(data = d, aes(h0, h1, color=treatment))+
geom_jitter() +
geom_line(data = grid, aes(x= h0, y=pred, group=treatment))
quote("hola")
quote(hola)
# 5.4 Categorical Variables ####
environment()
# 5.4 Categorical Variables ####
ls()
# 5.4 Categorical Variables ####
rm(list=ls())
data("Howell1")
d <- Howell1
d %>% str
m5.15 <- rethinking::map(
alist(
height ~ dnorm(mu, sigma),
mu <- a + bm*male,
a ~ dnorm(182, 100),
bm ~ dnorm(0, 20),
sigma ~ dunif(0, 50)
),
data=d
)
precis(m5.15)
plot(precis(m5.15))
post <- extract.samples(m5.15)
mu_male <- post$a + post$bm
PI(mu_male)
m5.15b <- rethinking::map(
alist(
height ~ dnorm(mu, sigma),
mu <- af(1-male) + am*male,
c(af, am) ~ dnorm(182, 100),
sigma ~ dunif(0, 50)
),
data=d
)
m5.15b <- rethinking::map(
alist(
height ~ dnorm(mu, sigma),
mu <- af*(1-male) + am*male,
c(af, am) ~ dnorm(182, 100),
sigma ~ dunif(0, 50)
),
data=d
)
plot(precis(m5.15b))
precis(m5.15b)
# 5.4.2 Many categories ####
rm(list=l())
# 5.4.2 Many categories ####
rm(list=ls())
data("milk")
d <- milk
d %>% str
unique(d$clade)
d <- d %>%
mutate(
clade.NWM = case_when(
clade == 'New World Monkey' ~ 1L,
TRUE ~ 0L
),
clade.OWM = case_when(
clade == 'Old World Monkey' ~ 1L,
TRUE ~ 0L
),
clade.S = case_when(
clade == 'Strepsirrhine' ~ 1L,
TRUE ~ 0L
)
)
d  %>% str
m5.16 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b.NWM * clade.NWM + b.OWM * clade.OWM + b.S * clade.S,
c(a, b.NWM, b.OWM, B.S) ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
),
data=d
)
m5.16 <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + b.NWM * clade.NWM + b.OWM * clade.OWM + b.S * clade.S,
c(a, b.NWM, b.OWM, b.S) ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
),
data=d
)
m5.16
precis(m5.16)
plot(precis(m5.16))
post <- extract.samples(m5.16)
mu.ape <- post$a
mu.NWM <- post$a + post$b.NWM
mu.OWM <- post$a + post$b.OWM
mu.S <- post$a + post$b.S
precis(data.frame(mu.ape, mu.NWM, mu.OWM, mu.S))
# difrerece between two groups
diff.NWM.OWM <- mu.NWM - mu.OWM
plot(diff.NWM.OWM)
quantile(diff.NWM.OWM, probs = c(0.025, 0.5, 0.975))
density(diff.NWM.OWM)
densplot(diff.NWM.OWM)
plot(density(diff.NWM.OWM))
plot(diff.NWM.OWM)
quantile(diff.NWM.OWM, probs = c(0.025, 0.5, 0.975))
plot(density(diff.NWM.OWM))
# 5.4.4 another approach: unique intercepts ####
rethinking::coerce_index(d$clade)
# 5.4.4 another approach: unique intercepts ####
d$clade_id <- rethinking::coerce_index(d$clade)
d
d %>% str
m5.16_alt <- rethinking::map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a[clade_id],
a[clade_id] ~ dnorm(0.6, 10),
sigma ~ dunif(0, 10)
),
data=d
)
precis(m5.16_alt)
precis(m5.16_alt, depth = 2)
sample(m5.16_alt)
plot(m5.16_alt)
extract.samples(m5.16_alt)
plot(extract.samples(m5.16_alt))
sim(m5.16_alt)
mean(sim(m5.16_alt))
plot(sim(m5.16_alt))
precis(m5.16_alt, depth = 2)
post
post %>% head
sim(post)
sim(m5.16)
# 5.5.3 Glimmer ####
rm(list=ls())
data(cars)
cars
rethinking::glimmer(formula = dist ~ speed, data = cars)
